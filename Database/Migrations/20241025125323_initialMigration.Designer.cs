// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241025125323_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Model.ParkingAuditLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParkingSpot_Id")
                        .HasColumnType("int");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSpot_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ParkingAuditLogs", (string)null);
                });

            modelBuilder.Entity("Database.Model.ParkingRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParkingSpot_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSpot_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ParkingRequests", (string)null);
                });

            modelBuilder.Entity("Database.Model.ParkingSpots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("AvialableFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("AvialableUntil")
                        .HasColumnType("date");

                    b.Property<bool>("IsAviable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo")
                        .IsUnique()
                        .HasFilter("[AssignedTo] IS NOT NULL");

                    b.ToTable("ParkingSpots", (string)null);
                });

            modelBuilder.Entity("Database.Model.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkAssingned")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Database.Model.ParkingAuditLogs", b =>
                {
                    b.HasOne("Database.Model.ParkingSpots", "ParkingSpots")
                        .WithMany("parkingAuditLogs")
                        .HasForeignKey("ParkingSpot_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Model.Users", "Users")
                        .WithMany("parkingAuditLogs")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParkingSpots");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Database.Model.ParkingRequests", b =>
                {
                    b.HasOne("Database.Model.ParkingSpots", "ParkingSpots")
                        .WithMany("parkingRequests")
                        .HasForeignKey("ParkingSpot_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Model.Users", "Users")
                        .WithMany("parkingRequests")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParkingSpots");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Database.Model.ParkingSpots", b =>
                {
                    b.HasOne("Database.Model.Users", "users")
                        .WithOne("ParkingSpots")
                        .HasForeignKey("Database.Model.ParkingSpots", "AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("users");
                });

            modelBuilder.Entity("Database.Model.ParkingSpots", b =>
                {
                    b.Navigation("parkingAuditLogs");

                    b.Navigation("parkingRequests");
                });

            modelBuilder.Entity("Database.Model.Users", b =>
                {
                    b.Navigation("ParkingSpots");

                    b.Navigation("parkingAuditLogs");

                    b.Navigation("parkingRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
